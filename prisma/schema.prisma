// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    createdAt     DateTime  @default(now())
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    orders        Order[]
    cart          Cart[]
}

model Cart {
    id        Int        @id @default(autoincrement())
    userId    String     @unique
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    cartItems CartItem[]
}

model CartItem {
    id        Int      @id @default(autoincrement())
    cartId    Int
    productId Int
    quantity  Int
    cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id          Int        @id @default(autoincrement())
    name        String
    description String
    pictures    String[]
    price       Int
    stock       Int
    weight      Float
    status      Status     @default(ACTIVE)
    variants    Variant[]
    slug        String
    cartItems   CartItem[]
    createdAt   DateTime   @default(now())
}

model Variant {
    id           Int           @id @default(autoincrement())
    name         String
    productId    Int
    product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
    optionValues OptionValue[] // Relation to OptionValue model
}

model OptionValue {
    id        Int     @id @default(autoincrement())
    name      String
    price     Int
    stock     Int
    variantId Int
    variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model CheckoutSession {
    id         Int           @id @default(autoincrement())
    sessionId  String        @unique
    sessionUrl String
    userId     String
    productIds Int[]
    quantities Int[]
    status     SessionStatus @default(ACTIVE)
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
}

model Order {
    id                    Int                 @id @default(autoincrement())
    userId                String
    sessionId             String
    customerInformation   CustomerInformation @relation(fields: [customerInformationId], references: [id])
    user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    productIds            Int[]
    quantities            Int[]
    status                OrderStatus         @default(PROCESSING)
    createdAt             DateTime            @default(now())
    updatedAt             DateTime            @updatedAt
    customerInformationId Int
}

model CustomerInformation {
    id           Int      @id @default(autoincrement())
    name         String
    addressLine1 String
    addressLine2 String
    city         String
    state        String
    country      String
    postalCode   String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    Order        Order[]
}

enum Role {
    USER
    ADMIN
    DEVELOPER
}

enum Status {
    ACTIVE
    DRAFT
}

enum SessionStatus {
    ACTIVE
    COMPLETED
    EXPIRED
    FAILED
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELED
}
